# 그리디 알고리즘(탐욕법)은 현재 상황에서 지금 당장 좋은 것만 고르는 방법
# 일반적인 그리디 알고리즘은 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력 요구
# 그리디 해법은 그 정당성 분석이 중요
# 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토 필요

# 루트 노드부터 시작하여 거쳐 가는 노드 값의 합을 최대로 만들기
# 간순히 매 상황에서 가장 큰 값만 고른다면? : 이것이 그리디 알고리즘이다. 
# 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많다, 
# 보통 그리디 알고리즘은 최적의 해의 가깝게 구해지거나 우연치 않게 최적의 해가 구해지는 경우가 있다.

# 하지만 코딩 테스트에서의 대부분의 그리디 문제는 탐욕법으로 얻은 해가 최적의 해가 되는 상황에서, 이를 추론할 수 있어야 풀리도록 출제된다. 곧 그리디 코딩 테스트는 탐욕법으로 나온 값이 최적의 해가 된다.

# 거스름돈 문제
# 당신은 음식점의 계산을 도와주는 점원이다. 카운터에는 거스름돈으로 사용할 500원, 100원, 50원, 10원짜리가 무한히 존재한다고 가정한다. 손님에게 거슬러 주어야 할 돈이 N원일 떄 거슬러 주어야 할 동전의 최소 개수를 구하세요. 단, 거슬러 줘야 할 돈 N은 항상 10의 배수이다.

# 최적의 해를 빠르게 구하기 위해서는 가장 큰 화폐 단위부터 돈을 거슬러 주면 된다.
# N원을 거슬러 줘야 할 떄, 가장 먼저 500원으로 거슬러 줄 수 잇을 만큼 거슬러 주고, 이후 100원, 50원, 10원 순으로 차례대로 거슬러주면 된다.

N = 1260
array = [500, 100, 50, 10]
result = 0

for coin in array:
    result += N // coin
    N %= coin
print(result)

# 거스름 돈 : 정당성 분석
# 가장 큰 화폐 단위부터 돈을 거슬러 주는 것이 최적의 해를 보장하는 이유?
# 가지고 있는 동전 중에서 큰 단위가 항상 적은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문

# 만약 800원을 거슬러 주어야 하는데 화폐 단위가 500원, 400원, 100원이라면?? : 400원 2개가 최적의 해이다. 왜냐면 500원은 400원의 배수가 아니기 때문이다.

# 그리디 알고리즘 문제에서는 이처럼 문제 풀이를 위한 최소한의 아이디러를 떠올리고 이것이 정당한지 검토할 수 있어야 한다.

# 거스름 돈 : 시간 복잡도 분석
# 화폐의 종류가 k라고 할 때, 소스코드의 시간 복잡도는 O(K)이다.
# 이 알고리즘의 시간 복잡도는 거스름 돈의 양과 무관하며, 동전의 총 종류에만 영향을 받는다.

# 1이 될 떄까지
# 어떠한 수 N이 1이 될 때까지 두 과정 중 하나를 반복적으로 선택하여 수행 단, 두 번째 연산은 N이 K로 나누어 떨어질 때만 선택 가능
# 1. N에서 1을 뺀다.
# 2. N을 K로 나눈다.

N = 25
K = 3
result = 0

while N != 1:
    if N % K == 0:
        N //= K
    else:
        N -= 1
    result += 1
print(result)

# 1이 될 때까지 : 정당성 분석
# 가능하면 최대한 많이 나누는 작업이 최적의 해를 항상 보장 할수 있을까?
# N이 아무리 큰 수여도, K로 계속 나눈다면 기하급수적으로 빠르게 줄일 수 있다.
# 다시 말해 K가 2 이상이기만 하면, k로 나누는 것이 1을 빼는 것보다 항상 빠르게 N을 줄일 수 있다.
# 또한 N은 항상 1에 도달하게 된다 (최적의 해 성립)
# N의 값을 줄일 떄 2 시아의 수로 나누는 작업이 1을 빼는 작업보다 수를 훨씬 많이 줄일 수 있다.

# 로그 시간 복잡도로 줄이기
n, k = map(int, input().split())
result = 0

while True:
    target = (n // k) * k
    result += (n - target)
    n = target
    # 밑에 3줄도 가능
    # target = (n % k)
    # result += target
    # n -= target
    # n이 k보다 작을 때 (더 이상 나눌 수 없을 때) 반복문 탈출
    if n < k:
        break
    # k로 나누기
    result += 1
    n //= k
  
print(result + (n - 1))