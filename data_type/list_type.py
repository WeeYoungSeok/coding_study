# 데이터를 연속적으로 담아 처리하기 위한 자료형

# 리스트 대신 배열 혹은 테이블이라고 부르기도 함

# 파이썬의 리스트는 아주 강력하다.

# 유사한 데이터가 연속적으로 담겨야할때 사용한다.

# 리스트 초기화
arr = []
arr = list()

# 데이터 구분법
arr = [1, 2]

# 원소 접근
print(arr[0])

# 크기가 N이고, 모든 값이 0인 1차원 리스트 초기화
n = 10
arr = [0] * n
print(arr)

# 인덱스에 음의 정수를 넣을때
arr = [1, 2, 3, 4, 5, 6, 7]

# 여덟번쨰 원소
print(arr[7])

# 뒤에서 첫번쨰 원소
print(arr[-1])

# 뒤에서 세번쨰 원소
print(arr[-3])

# 네번째 원소 값 변경
arr[3] = 7
print(arr)

# 연속적인 위치를 갖는 원소를 가져올때 슬라이싱 이용
# 다른 언어는 별도의 함수나 조금 다르게 구현이 된다.
# :을 이용해서 시작:끝을 이용하는데 끝 인덱스는 실제 인덱스보다 1을 크게 설정해야 한다.

# 두 번째 원소부터 네 번째 원소까지
print(arr[1 : 4])

# 리스트 컴프리헨션
# 리스트를 초기화하는 방법 중 하나
# 대괄호 안에 조건문과 반복문을 적용하여 리스트를 초기화 할 수 있다.
# 코드를 간단하게 만든다.

# i가 0부터 9까지 늘어날떄마다 i을 배열안에 넣는다.
arr = [i for i in range(10)]
print(arr)
# 결과 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# 조건문 포함
# i가 0부터 19까지 반복할떄 홀수만 담겠다.
arr = [i for i in range(20) if i % 2 == 1]

# 일반적인 코드
arr = []
for i in range(20):
    if i % 2 == 1:
        arr.append(i)

# 1부터 9까지 수들의 제곱 값을 포함 하는 리스트
arr = [i * i for i in range(1, 10)]

# 2차원 리스트를 초기활때 효과적이다.

# 특히 N X M 크기의 2차원 리스트 초기화할때 유용
n = 10
m = 20
arr = [[0] * m for _ in range(n)]

# 나쁜 예시
arr = [[0] * m] * n
# 리스트는 객체 형태가되고 별도의 주소값을 가지게 된다.
# 해당 코드는 전체 리스트 안에 포함된 각 리스트가 모두 같은 객체로 인식된다.
# 이렇게되면 내부 리스트 중에서 특정 위치의 하나의 값만 바꿔도 모든 값이 변하게 된다.

# 파이썬에서 반복을 수행하되 반복을 위한 변수의 값을 무시하자고 할 떄는 언더바를 자주 사용한다.

# 리스트 원소 삽입 append : 시간 복잡도 O(1)

# 정렬 sort(), sort(reverse = True) : 시간 복잡도 O(NlogN)

# 원소 뒤집기 reverse() : 시간 복잡도 O(N)

# 특정 위치 원소 삽입 insert(삽입 위치 인덱스, 삽입할 값) : 시간 복잡도 O(N)

# 리스트 특정 원소 개수 count(특정값) : 시간 복잡도 O(N)

# 원소 제거 remove(특정값) : 시간 복잡도 O(N)

# 파이썬은 removeAll은 따로 코드를 작성해야한다.

arr = [1, 4, 3]
arr.append(2)
arr.sort()
arr.reverse()
arr.insert(2, 3)
arr.count(3)
arr.remove(1)

# 값 모두 제거
arr = [1, 2, 3, 4, 5, 5, 5]
remove_set = {3, 5} # 집합 자료형

# remove_list에 포함되지 않은 값만을 저장
result = [i for i in arr if i not in remove_set]
print(result)