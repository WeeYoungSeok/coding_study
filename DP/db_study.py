# 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상 시키는 방법이다.
# 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 한다.
# 탑다운, 보텀업 두 가지 방식의 구현으로 구성된다.

# 동적 계획법이라고도 부른다.
# 일반적인 프로그래밍에서 동적의 의미는 프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법 (동적할당)이라고 하지만 DP에서는 별다른 의미 없이 사용된 단어다.

# 문제가 해당 조건에 만족할 때 사용 가능
# 최적 부분 주고 (Optiomal Substructrue)
# 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있다.
# 중복되는 부분 문제 (Overlapping Subproblem)
# 동일한 작은 문제를 반복적으로 해결해야 한다.

# 피보나치 수열
# 점화식이란 인접한 항들 사이의 관계식을 의미
# 피보나치 수열을 점화식으로 표한하면
# an = an-1 + an-2, a1 = 1, a2 = 1 
# n번쨰 피보나치 수는 n-1 번째 피보나치 수 + n-2 번째 피보나치 수로 표현이 가능하다.

# 간단한 재귀함수 피보나치 수
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)
print(fibo(4))

# 재귀함수로 간단하게 구현한다면
# 지수 시간 복잡도를 가지게 된다 (정말 안 좋다)
# 6번째 피보나치 수를 호출할때 동일한 부분을 반복적으로 호출하게 된다 (2번째 피보나치 수가 5번 호출된다)
# 중복되는 부분 문제가 발생한다.

# 재귀함수는 fibo(30)을 계산하기 위해 약 10억가량의 연산을 수행해야한다.
# fibo(100)은 2의 100승이다.. (이 수치 1초에 1억번을 수행하는 컴퓨타가 수행해도 우주가 멸망할때까지도 안 끝나는 시간이다.)

# 피보나치 수는 최적 부분 구조가 된다 큰 문제가 작은 문제로 나누어진다.
# 피보 4번째 수를 부를때 피보 3 2로 나누어진다.
# 동일한 작은 분제가 반복적 (준복되는 부분 문제)
# 피보 4번쨰 수를 부를떄 피보 2번째 수가 2번 호출된다.

# 상향식, 하향식
# 하향식 (탑다운)
# 메모이제이션
# 한 번 계산된 결과를 메모리 공간에 메모하는 기법
# 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져온다.
# 값을 기록해 놓는다는 점에서 캐싱이라고도 한다.
# memo, dp, d, table, cache라고 배열 변수명을 설정한다.

# 탑다운(메모제이션) - 하향식 방식은 재귀적으로 호출된다.
# 보텀업 - 상향식 아래에서 위로 올라간다. (보통 반복문을 이용한다.)
# DP의 전형적인 형태는 보텀업 방식이다.
# 결과 저장용 리스트는 DP 테이블이라고 부른다.
# 엄밀히 말하면 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미한다.
# 따라서 메모이제이션은 DP에 국한된 개념은 아니다. (DP에서뿐만이아니라 한번 구해진 결과를 별도의 공간에 저장해놓으면 캐싱, 메모이제이션 기법을 사용했다고 한다.)
# 한 번 계산된 결과를 담아 놓기만 하고 DP를 위해 활용하지 않을 수도 있다.

# 피보나치 (탑다운)
# 한 번 계산된 결과를 메모이제이션하기 위한 리스트 초기화
# 이 배열의 1번지부터는 피보나치 수 첫번째 수가 차례대로 담긴다.
# 100으로 초기화한 이유는 99번째 피보나치 수가 가장 마지막 수라고 가정
d = [0] * 100

# 피보나치 함수를 재귀함수로 구현(탑다운 DP)
# 시간 복잡도 O(N)으로 줄어든다.
def fibo_top_down(x):
    # 종료 조건(1 혹은 2일 때 1을 반환)
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo_top_down(x - 1) + fibo_top_down(x - 2)
    return d[x]
print(fibo_top_down(99))

# 피보나치 함수 보텀업
d = [0] * 100

# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수 반복문으로 구현
for i in range(3, n + 1):
    d[i] = d[i - 1] + d[i - 2]
  
print(d[n])

# DP vs 분할 정복
# DP와 분할 정복은 모두 최적 부분 구조를 가질 때 사용한다.
# 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있는 상황
# DP와 분할 정복의 차이는 부분 문제의 중복이다.
# DP 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복된다.
# 분할 전복 분제에서는 동일한 부분 문제가 반복적으로 계싼되지 않는다.

# 퀵 정렬 알고리즘 예시 (분할 정복)
# 한 번 기준 원소(pivot)가 자리를 변경해서 자리를 잡으면 그 기준 우너소의 위치는 바꾸지 않는다.
# 분할 이후 해당 피벗을 다시 처리하는 부분 문제는 호출 하지 않는다.
# 한번 바뀐 피벗은 절대 바뀌지 않는다 (부분 중복이 없다.)

# DP 문제에 접근하는 방법
# 주어진 문제가 DP 유형임을 파악하는 것이 가장 중요
# 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토한다.
# 다른 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려해 보자.
# 일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 (탑다운) 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면, 코드를 개선하는 방법을 사용할 수 있다.
# 일반적인 코딩 테스트 수준에서는 기본 유형의 DP 문제가 출제되는 경우가 많다.
# 점화식을 떠올릴 때 많은 시간이 소요되기 때문에 보통 기본 문제가 출제된다.
# 많이 풀어보는 방법밖에 없다.

# 개미 전사
# 인접한 방은 약탈 못 함
# 방의 개수가 4개일때 식량을 고를 수 있는 경우의 수는 8가지이다.
# ai = (i번째 식량창고까지의 최적의 해) (얻을 수 있는 식량의 최댓값)
# 이렇게 정의한다면 DP를 적용할 수 있다.
# DP 테이블 값 : a0 = 1, a1 = 3, a2 = 3, a3 = 8
# 0번째 창고까지만 존재할 경우 최대 1의 식량을 얻을 수 잇다

# 왼쪽부터 차례대로 식량창고를 턴다고 했을 때, 특정한 i번째 식량 창고에 대해서 털지 안 털지의 여부를 결정하면, 2가지 경우 중에서 더 많은 식량을 털 경우를 선택하면 된다.
# 1. 바로 앞쪽에서 식량 창고를 털었다면 현재 식량 창고는 털 수 없다. 
# 2. 바로 앞쪽에서 식량 창고를 털지 않았다면 현재 식량 창고를 털 수 있따.
# i번째 식량 창고를 털때 바로 앞의 i - 1번째까지의 턴 값과
# i - 2번째 까지의 식량 창고를 턴 값에 현재 식량 창고 값을 더한 값 중에 더 큰 경우를 고르면 된다.

# 최적 부분 구조 : 특정 번째까지의 최적의 해는 i -1번째 해 i - 2번째의 해를 비교해서 해결할 수 있다. i번째를 구할때 i - 1, i - 2로 나누어지기 떄문에 최적 부분 구조이다.

# ai = (i번째 식량창고까지의 최적의 해 (얻을 수 있는 식량의 최댓값))
# ki = (i번째 식량창고에 있는 식량의 양)
# 점화식 : ai = max(ai - 1, ai - 2 + ki)이다
# 한 칸 이상 떨어진 식량창고는 항상 털 수 잇으므로 i - 3번째 이하는 고려할 필요가 없다.

# 보텀업
n = int(input())
k = list(map(int, input().split()))

# N은 최대 100이므로 앞서 계산된 결과를 저장하기 위한 DB 테이블 초기화
d = [0] * 100

# 보텀업 진행
# 상자가 한개만 있을때 최댓값
d[0] = k[0]
# 상자가 2개있을때 최댓값
d[1] = max(k[0], k[1])
# 상자가 3개있을때는 첫번째 털때와 현재 창고 더한값
# 2개잇을떄 최댓값 둘중 큰거 넣기
for i in range(2, n):
    d[i] = max(d[i - 1], d[i - 2] + k[i])

print(d[n - 1])

# 1로 만들기
# 정수 X가 주어졌을 때, 정수 X에 사용할 수 잇는 연산은 4가지
# 1. X가 5로 나누어 떨어지면, 5로 나눔
# 2. X가 3으로 나누어 떨어지면, 3으로 나눔
# 3. X가 2로 나누어 떨어지면, 2로 나눔
# 4. X에서 1을 밴다.
# X가 주어졌을 때, 연산 4개를 적절히 사용해서 값을 1로 만들고자 한다. 연산 사용 횟수를 최소로 만들어 보자.
# 26 - 25 - 5 - 1 최소 3번이다.

# 최적 부분 문제와 중복 문제 둘다 만족
# x가 6일때
# x에서 1을 뺄 때, x를 2로 나눌떄, x를 3으로 나눌때로 나뉘어진다.
# 또 그 도출된 값이 또 조건에 부합할때 나뉘어진다.
# 매 상황에서 최대 4가지 경우를 고려해야한다.

# 그리디와 다른 이유는 그리디 문제는 1을 빼는것보다 나누는 값이 무조건 수를 더 많이 줄일 수 있었기 때문이다.

# ai = (i를 1로 만들기 위한 최소 연산 횟수)
# 점화식
# ai = min(ai - 1, ai/2, ai/3, ai/5) + 1
# 단, 1을 빼는 연살을 제외하고는 해당 수로 나누어떨어질 때에 한해 점화식을 적용할 수 있다.
x = int(input())

# x는 30000까지 임
# 앞서 계산된 결과를 저장하기 위한 DP
# x가 1인 경우에는 연산 횟수가 0이다.
# 2부터 연산 횟수가 1이다.
# 연산 횟수를 담을 테이블
d = [0] * 30001

# 점화식은 min에 전부 넣었지만
# 실제로는 나누어 떨어지는 경우에만 넣어서 min을 도출하면 된다.
# DP 진행 보텀업
# 고로 for문을 2부터 돈다.
for i in range(2, x + 1):
    # 현재의 수에서 1을 빼는 경우
    d[i] = d[i - 1] + 1
    # 현재의 수가 2로 나누어 떨어지는 경우
    # 1을 밖에서 더해주어도 된다.
    # 1을 더해주는 이유는 해당 번지의 연산에서 1을 빼거나, 2로 나누거나, 3으로 나누거나, 5로 나누었을 때 연산횟수를 가져오는 것이고, 현재의 값의 연산횟수는 그 전 경우들의 연산횟수에서 한번 더 해당 조건 연산이 이루어져야지 해당 값의 연산 횟수가 나오므로 1을 더해준다.
    if i % 2 == 0:
        # d[i] = min(d[i], d[i // 2]) + 1 (이렇게도 가능, 이렇게 하려면 위에 1을 빼는 전 연산을 찾을 때 +1을 해주면 안된다.)
        d[i] = min(d[i], d[i // 2] + 1)
    if i % 3 == 0:
        d[i] = min(d[i], d[i // 3] + 1)
    if i % 5 == 0:
        d[i] = min(d[i], d[i // 5] + 1)
print(d[x])

# 효율적인 화폐 구성
# N가지 종류의 화폐가 있다. 이 화폐들의 개수를 최소한으로 이용해서 그 가치의 합이 M원이 되도록 하려고 한다. 이떄 각 종류의 화폐는 몇 개라도 사용할 수 있다.
# 예를 들어 2원, 3원 단위의 화폐가 있을 때는 15원을 만들기 위해 3원을 5개 사용하는 것이 가장 최소한의 화폐 개수이다.
# M원을 만들기 위한 최소한의 화폐 개수를 출력하시오.
# 불가능하면 -1

# ai = (금액 i를 만들 수 있는 최소한의 화폐 개수)
# k = 각 화폐의 단위
# 점화식 : 각 화폐 단위인 k를 하나씩 확인하며
# ai - k를 만드는 방법이 존재하는 경우, ai = min(ai, ai - k + 1)
# ai - k원을 만들 수 있다면 현재 k안에 화폐를 추가해서 만들 수 있기 때문에 + 1을 해준다.
# ai - k를 만드는 방법이 존재하지 않는 경우, ai = INF

# N : 화폐 종류의 갯수
# M : 합
n, m = map(int, input().split())

k = []
for _ in range(n):
    k.append(int(input()))

# 합이 0부터 m까지 최소 화폐 개수를 담기 위한 dp
# 0원은 들어올 수 없고
# 1원 부터 해당 합까지의 인덱스의 요소는 10001이라고 만들 수 없는 값이다 라고 초기화 해준다
# 10001인 이유는 M이 10000까지 이며 화폐가 1이 들어올 경우 10000개의 화폐가 최소값이므로 10001로 한다.
# INF = 10001이다.
# 0원부터 m원이니 m + 1까지 곱해야 m번지가 나옴
d = [10001] * (m + 1)
d[0] = 0

# 시간 복잡도 O(m * n) 100만이다.
# 1 <= N <= 100, 1 <= M <= 10000

# dp 진행 보텀업
# i는 각각의 화폐 단위를 의미
for i in range(n):
    # j는 각각의 금액을 의미
    for j in range(k[i], m + 1):
        # k = [3, 5, 7] 로 가정하면
        # 처음 k는 3이 들어올거임
        # 그럼 j는 3부터 시작
        # 처음에는 d[0]원을 만드는 방법을 물어볼것임 존재함 0개로
        if d[j - k[i]] != 10001: # (i - k)원을 만드는 방법이 존재하는 경우 (i - k가 존재한다면 k원을 더해서 무조건 만들 수 있다.)
            # 처음 d[3] = 10001 이다
            # 하지만 min에는 min(10001, d[0] + 1) 즉 min(10001, 1)이 되어서 d[3]은 1이 된다.
            # 고로 3원은 화폐에 3원이 존재한다면 1개로 가장 최소값으로 만들 수 있다.
            # 이렇게 3의 배수는 3 6 9 12 15는 1 2 3 4로 d[3] = 1 이런식으로 저장이 된다.
            # 하지만 15원은 처음에 k가 3이면 d[15] = 5로 저장이 되어있다.
            # 하지만 k가 5로 들어오는 순간 부터는
            # j가 5부터 시작하는데
            # if 문에서 처음 0번지를 물어볼 것이고
            # d[5] = min(10001, 0 + 1) 이어서 d[5] = 1이 된다.
            # 이렇게 j가 10일때는 d[10]이 d[10] = min(10001, 1 + 1)이 되어서 d[10]은 2개가 된다
            # j가 15가 들어오는 순간
            # d[10]은 2이므로 if문을 통과하고
            # d[15] = min(d[15], d[10] + 1)로 비교할텐데
            # 위에서 j가 3부터 시작할때 k[i]가 즉 3일때 이미 d[15] = 5로 저장이 되어있다
            # 하지만 k의 값이 5일때 d[15] = 3으로 더 줄일 수 있어서
            # 최종적으로 d[15] = min(기존 d[15] = 5, 새로운 d[15]값 d[10] + 1 즉 3이 들어온다.)
            # 고로 min이므로 d[15] = 3으로 변경이 된다.
            # 이런식으로 k를 계속 돌면서 k의 화폐로 만들 수 있는 값들을 전부 넣으면서
            # 혹시 이미 들어가있는 값이 d[j - 선택된 화폐]로 존재한다면
            # 혹시 그 값이 d[j - 선택된 값] + 1 보다 크다면 d[j - 선택된 값] + 1로 바꾸어준다.
            d[j] = min(d[j], d[j - k[i]] + 1)
# 결고 ㅏ출력
if d[m] == 10001:
    print(-1)
else:
    print(d[m])

# 금광
# N X M 금광이 있다
# 금광은 1 X 1 크기의 칸으로 나누어져 있으며, 각 칸은 특정한 크기의 금이 들어있다.
# 채굴자는 첫 번째 열부터 출발하여 금을 캐기 시작한다.
# 맨 처음에는 첫 번째 열의 어느 행에서든 출발할 수 있다.
# 이후에 m - 1번에 걸쳐서 매번 오른쪽 위, 오른쪽, 오른쪽 아래 3가지 중 하나의 위치로 이동해야 한다.
# 채굴자가 얻을 수 있는 금의 최대 크기

# 내 풀이
t = int(input())

for _ in range(t):
    array = []
    n, m = map(int, input().split())
    gold = list(map(int, input().split()))
    for i in range(0, n * m, m):
        array.append(gold[i : i + m])
    d = [0] * n
    for i in range(len(array)):
        d[i] = array[i][0]
    for j in range(1, len(array[0])):
        max_gold = []
        for i in range(len(array)):
            left_up_value = array[i][j]
            left_value = array[i][j]
            left_down_value = array[i][j]
            if i - 1 >= 0:
                left_up_value += d[i - 1]
            if i + 1 < n:
                left_down_value += d[i + 1]
            left_value += d[i]
            max_gold.append(max(left_up_value, left_value, left_down_value))
        for k in range(len(max_gold)):
            d[k] = max_gold[k]
    print(max(d))

# 이코테
# array[i][j] = i행 j열에 존재하는 금의 양
# dp[i][j] = i행 j열까지의 최적의 해 (얻을 수 있는 금의 최댓값)
# 점화식 : dp[i][j] = array[i][j] + max(dp[i - 1][j - 1], dp[i][i - j], dp[i + 1][j - 1])
# 이때 테이블에 접근할 때마다 리스트의 범위를 벗어나지 않는지 체크해야 한다.
# 편의상 초기 데이터를 담는 변수 array를 사용하지 않아도 된디ㅏ.
# 바로 dp 테이블에 초기 데이터를 담아서 dp를 적용할 수 있다.
for tc in range(int(input())):
    # 금광 정보 입력
    n, m = map(int, input().split())
    array = list(map(int, input().split()))
    # dp에 바로 금광 데이터를 넣는다.
    # dp를 위한 2차원 dp 테이블 초기화
    dp = []
    index = 0
    for i in range(n):
        dp.append(array[index:index + m])
        index += m
    # dp 진행
    for j in range(1, m):
        for i in range(n):
            # 왼쪽 위에서 오는 경우
            # 만약 현재 금광 위치가 가장 위족이라면 왼쪽 위에서는 올 수가 없으므로 이전 left_up의 금광은 0이다
            if i == 0: 
                left_up = 0
            else:
                left_up = dp[i - 1][j - 1]
            # 왼쪽 아래에서 오는 경우
            # 만약 현재 금광 위치가 가장 아래라면 왼쪽 아래에서 올 수가 없으므로 이전 left_down의 금광은 0이다
            if i == n - 1:
                left_down = 0
            # 왼쪽의 금광은 항상 더해줄 수 있다.
            else:
                left_down = dp[i + 1][j - 1]
            # 왼쪽에서 오는 경우
            left = dp[i][j - 1]
            # 따라서 현재 금광에다가 전에 올 수 있는 3가지의 금광중 가장 큰 금광을 더하여 
            # 현재 금광을 그 전 금광을 더했을 경우 가장 큰 금광으로 바꾸어 준다.
            dp[i][j] = dp[i][j] + max(left_up, left_down, left)
    result = 0
    # dp를 돌면서 행만 바꿔가면서
    # 행 중에 가장 마지막 열 값만 검사해서 max를 return한다.
    for i in range(n):
        result = max(result, dp[i][m - 1])
    print(result)

# 병사 배치하기
# N명의 병사가 무작위로 나열되어 있다.
# 각 병사는 특정한 값의 전투력을 보유하고 있다.
# 병사를 배치할 때는 전투력이 높은 병사가 앞쪽에 오도록 내림차순으로 배치를 하고자 한다.
# 다시 말해 앞쪽에 있는 병사의 전투력이 항상 뒤쪽에 있는 병사보다 높아야 한다.
# 또한 배치 과정에서는 특정한 위치에 있는 병사를 열외시키는 방법을 이용한다. 그러면서도 남아 있는 병사의 수가 최대가 되도록 하고 싶다.

# 아이디어 : 가장 긴 증가하는 부분 수열(Longest Increasing Subsequence, LIS)로 알려진 전형적인 DP다
# 예) array = [4, 2, 5, 8, 4, 11, 15] 이 수열의 가장 긴 증가하는 부분 수열은 [4, 5, 8, 11, 15]다
# 본 문자는 가장 긴 감소하는 부분 수열을 찾는 문제로 치환할 수 있으므로, LIS 알고리즘을 조금 수정하여 적용함으로써 정답 도출이 가능하다.

# 가장 긴 증가하는 부분 수열 알고리즘
# D[i] = array[i]를 마지막 원소로 가지는 부분 수열의 최대 길이라고 정의 했을 때
# i는 각각의 원소이고 j는 i의 원소의 앞
# i보다 앞쪽에 있는 모든 원소를 확인하면서 
# 그 원소가 현재 확인하고 있는 원소보다 작다면
# 즉 앞쪽에 있는 원소가 현재 확인하고 있는 원소보다 작다면
# 점화식 이용 가능
# 점화식 = 모든 0 <= j < i 에 대하여, D[i] = max(D[i], D[j] + 1) if array[j] < array[i]
# 부분 수열의 최대 길이를 구하는 것이다.
# + 1을 해주는 이유는 1명 더 들어가야하기 때문

# 초기상태 i = 0 이다
# 예시 배열에서의 dp의 각 번지의 값은 초기값이 1이다
# 왜냐면 하나씩 검사했을때 다 1개씩은 들어가야 되기 때문에 최대 길이가 전부 1이된다
# i가 1로 늘어나면 가장 앞쪽 2개의 원소가 가장 긴 증가하는 수열이 될때
# 최대 길이가 몇이되냐인데
# 2칸이어도 4 다음에 2가있으므로 2가 올수가없다.
# 그래서 i가 2일때도 수열의 최대길이는 아직도 1이다.
# i가 2가 되면 3칸이 되고 5를 기준으로 전 번지들을 검사한다.
# 5보다 작은 2와 4가 있지만
# 4부터 검사해서 2로 와야하기 때문에
# 4, 5 거나 2, 5로만 2칸을 짤 수 있다 고로 최대 길이는 2이다.

# 즉 배열의 길이를 처음부터 돌면서
# 1칸 일때, 2칸일 때를 가정하면서 가장 마지막 원소가 i번지라고 가정할 때
# 그 전의 원소들로 하여금 수열이 이루어질 최대 길이를 구해줄 수 있다.

# dp에서 가장 마지막 번지가 즉 가장 긴 수열이 된다
# 우리가 풀어야하는 문제는 거꾸로기 때문에
# 배열을 거꾸로 뒤집은 뒤 수행한다.

n = int(input())
array = list(map(int, input().split()))
# 순서를 뒤집어 '최장 증가 부분 수열' 문제로 변환
array.reverse()

# DP를 위한 1차원 DP 테이블 초기화
d = [1] * n

# 가장 긴 증가하는 수열(LIS) 알고리즘 수행
for i in range(1, n):
    for j in range(0, i):
        if array[j] < array[i]:
            d[i] = max(d[i], d[j] + 1)
print(n - max(d))