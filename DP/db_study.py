# 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상 시키는 방법이다.
# 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 한다.
# 탑다운, 보텀업 두 가지 방식의 구현으로 구성된다.

# 동적 계획법이라고도 부른다.
# 일반적인 프로그래밍에서 동적의 의미는 프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법 (동적할당)이라고 하지만 DP에서는 별다른 의미 없이 사용된 단어다.

# 문제가 해당 조건에 만족할 때 사용 가능
# 최적 부분 주고 (Optiomal Substructrue)
# 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있다.
# 중복되는 부분 문제 (Overlapping Subproblem)
# 동일한 작은 문제를 반복적으로 해결해야 한다.

# 피보나치 수열
# 점화식이란 인접한 항들 사이의 관계식을 의미
# 피보나치 수열을 점화식으로 표한하면
# an = an-1 + an-2, a1 = 1, a2 = 1 
# n번쨰 피보나치 수는 n-1 번째 피보나치 수 + n-2 번째 피보나치 수로 표현이 가능하다.

# 간단한 재귀함수 피보나치 수
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)
print(fibo(4))

# 재귀함수로 간단하게 구현한다면
# 지수 시간 복잡도를 가지게 된다 (정말 안 좋다)
# 6번째 피보나치 수를 호출할때 동일한 부분을 반복적으로 호출하게 된다 (2번째 피보나치 수가 5번 호출된다)
# 중복되는 부분 문제가 발생한다.

# 재귀함수는 fibo(30)을 계산하기 위해 약 10억가량의 연산을 수행해야한다.
# fibo(100)은 2의 100승이다.. (이 수치 1초에 1억번을 수행하는 컴퓨타가 수행해도 우주가 멸망할때까지도 안 끝나는 시간이다.)

# 피보나치 수는 최적 부분 구조가 된다 큰 문제가 작은 문제로 나누어진다.
# 피보 4번째 수를 부를때 피보 3 2로 나누어진다.
# 동일한 작은 분제가 반복적 (준복되는 부분 문제)
# 피보 4번쨰 수를 부를떄 피보 2번째 수가 2번 호출된다.

# 상향식, 하향식
# 하향식 (탑다운)
# 메모이제이션
# 한 번 계산된 결과를 메모리 공간에 메모하는 기법
# 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져온다.
# 값을 기록해 놓는다는 점에서 캐싱이라고도 한다.
# memo, dp, d, table, cache라고 배열 변수명을 설정한다.

# 탑다운(메모제이션) - 하향식 방식은 재귀적으로 호출된다.
# 보텀업 - 상향식 아래에서 위로 올라간다. (보통 반복문을 이용한다.)
# DP의 전형적인 형태는 보텀업 방식이다.
# 결과 저장용 리스트는 DP 테이블이라고 부른다.
# 엄밀히 말하면 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미한다.
# 따라서 메모이제이션은 DP에 국한된 개념은 아니다. (DP에서뿐만이아니라 한번 구해진 결과를 별도의 공간에 저장해놓으면 캐싱, 메모이제이션 기법을 사용했다고 한다.)
# 한 번 계산된 결과를 담아 놓기만 하고 DP를 위해 활용하지 않을 수도 있다.

# 피보나치 (탑다운)
# 한 번 계산된 결과를 메모이제이션하기 위한 리스트 초기화
# 이 배열의 1번지부터는 피보나치 수 첫번째 수가 차례대로 담긴다.
# 100으로 초기화한 이유는 99번째 피보나치 수가 가장 마지막 수라고 가정
d = [0] * 100

# 피보나치 함수를 재귀함수로 구현(탑다운 DP)
# 시간 복잡도 O(N)으로 줄어든다.
def fibo_top_down(x):
    # 종료 조건(1 혹은 2일 때 1을 반환)
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo_top_down(x - 1) + fibo_top_down(x - 2)
    return d[x]
print(fibo_top_down(99))

# 피보나치 함수 보텀업
d = [0] * 100

# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수 반복문으로 구현
for i in range(3, n + 1):
    d[i] = d[i - 1] + d[i - 2]
  
print(d[n])

# DP vs 분할 정복
# DP와 분할 정복은 모두 최적 부분 구조를 가질 때 사용한다.
# 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있는 상황
# DP와 분할 정복의 차이는 부분 문제의 중복이다.
# DP 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복된다.
# 분할 전복 분제에서는 동일한 부분 문제가 반복적으로 계싼되지 않는다.

# 퀵 정렬 알고리즘 예시 (분할 정복)
# 한 번 기준 원소(pivot)가 자리를 변경해서 자리를 잡으면 그 기준 우너소의 위치는 바꾸지 않는다.
# 분할 이후 해당 피벗을 다시 처리하는 부분 문제는 호출 하지 않는다.
# 한번 바뀐 피벗은 절대 바뀌지 않는다 (부분 중복이 없다.)

# DP 문제에 접근하는 방법
# 주어진 문제가 DP 유형임을 파악하는 것이 가장 중요
# 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토한다.
# 다른 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려해 보자.
# 일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 (탑다운) 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면, 코드를 개선하는 방법을 사용할 수 있다.
# 일반적인 코딩 테스트 수준에서는 기본 유형의 DP 문제가 출제되는 경우가 많다.
# 점화식을 떠올릴 때 많은 시간이 소요되기 때문에 보통 기본 문제가 출제된다.
# 많이 풀어보는 방법밖에 없다.

# 개미 전사
# 인접한 방은 약탈 못 함
# 방의 개수가 4개일때 식량을 고를 수 있는 경우의 수는 8가지이다.
# ai = (i번째 식량창고까지의 최적의 해) (얻을 수 있는 식량의 최댓값)
# 이렇게 정의한다면 DP를 적용할 수 있다.
# DP 테이블 값 : a0 = 1, a1 = 3, a2 = 3, a3 = 8
# 0번째 창고까지만 존재할 경우 최대 1의 식량을 얻을 수 잇다

# 왼쪽부터 차례대로 식량창고를 턴다고 했을 때, 특정한 i번째 식량 창고에 대해서 털지 안 털지의 여부를 결정하면, 2가지 경우 중에서 더 많은 식량을 털 경우를 선택하면 된다.
# 1. 바로 앞쪽에서 식량 창고를 털었다면 현재 식량 창고는 털 수 없다. 
# 2. 바로 앞쪽에서 식량 창고를 털지 않았다면 현재 식량 창고를 털 수 있따.
# i번째 식량 창고를 털때 바로 앞의 i - 1번째까지의 턴 값과
# i - 2번째 까지의 식량 창고를 턴 값에 현재 식량 창고 값을 더한 값 중에 더 큰 경우를 고르면 된다.

# 최적 부분 구조 : 특정 번째까지의 최적의 해는 i -1번째 해 i - 2번째의 해를 비교해서 해결할 수 있다. i번째를 구할때 i - 1, i - 2로 나누어지기 떄문에 최적 부분 구조이다.

# ai = (i번째 식량창고까지의 최적의 해 (얻을 수 있는 식량의 최댓값))
# ki = (i번째 식량창고에 있는 식량의 양)
# 점화식 : ai = max(ai - 1, ai - 2 + ki)이다
# 한 칸 이상 떨어진 식량창고는 항상 털 수 잇으므로 i - 3번째 이하는 고려할 필요가 없다.

# 보텀업
n = int(input())
k = list(map(int, input().split()))

# N은 최대 100이므로 앞서 계산된 결과를 저장하기 위한 DB 테이블 초기화
d = [0] * 100

# 보텀업 진행
# 상자가 한개만 있을때 최댓값
d[0] = k[0]
# 상자가 2개있을때 최댓값
d[1] = max(k[0], k[1])
# 상자가 3개있을때는 첫번째 털때와 현재 창고 더한값
# 2개잇을떄 최댓값 둘중 큰거 넣기
for i in range(2, n):
    d[i] = max(d[i - 1], d[i - 2] + k[i])

print(d[n - 1])

# 1로 만들기
# 정수 X가 주어졌을 때, 정수 X에 사용할 수 잇는 연산은 4가지
# 1. X가 5로 나누어 떨어지면, 5로 나눔
# 2. X가 3으로 나누어 떨어지면, 3으로 나눔
# 3. X가 2로 나누어 떨어지면, 2로 나눔
# 4. X에서 1을 밴다.
# X가 주어졌을 때, 연산 4개를 적절히 사용해서 값을 1로 만들고자 한다. 연산 사용 횟수를 최소로 만들어 보자.
# 26 - 25 - 5 - 1 최소 3번이다.